#include <iostream>
#include <cmath>
#include <math.h>
#include <fstream>
#include <vector>

using namespace std;

struct Vec{
    double x,y,z;
    Vec(double xin,double yin,double zin){
        x=xin;
        y=yin;
        z=zin;
    }
};

//returns distance between two Atoms
double dist(Vec atom, Vec otheratom){
    double sum = pow((atom.x - otheratom.x), 2) + pow((atom.y - otheratom.y), 2) + pow((atom.y - otheratom.y), 2);
    return sqrt(sum);
}

//calculates a distance matrix given an atom list
double** distanceMatrix(vector<Vec> &v, int dim){
    double** mat = new double*[dim];
    for(int i = 0; i< dim ; i++){
        mat[i] = new double[dim];
    }
    for(int i=0;i<dim;i++){
        //j<i because symmetric
        for(int j=0;j<i;j++){
            mat[i][j] = dist(v[i],v[j]);
        }
    }
    return mat;
}
//tries to print a distance matrix(screen to small)
void printMat(double** m, int dim){
    for(int k=0;k<dim;k++){
        for(int l=0;l<dim;l++){
            cout<<round(m[k][l])<<"\t";
        }
        cout<<"\n";
    }
}

//returns dRMS
double dRMS(double** m1,double** m2, double n, double dim){
    //n is the frame count
    double factor = 2/(n*(n-1));
    double sum=0;
    for(int i=0;i<dim;i++){
        for(int j=0;j<i;j++){
            sum += pow(m1[i][j] - m2[i][j],2);
        }
    }
    return sqrt(factor*sum);
}

//removes "generated by" message and  # of atoms
int convert(){
    ifstream inFile;
    string line;
    ofstream outFile;
    int atomNum;
    inFile.open("/home/user/CAall.xyz");
    outFile.open("/home/user/CAall_WoMess.xyz");
    //gets # of Atoms
    inFile>>atomNum;
    //gets rid of the first 2 lines
    getline(inFile,line);
    getline(inFile,line);
    cout<<atomNum<<"\n";
    int count=0;

    while (getline(inFile,line)){
        count++;
        outFile<<line<<endl;
        cout<<line<<"\n";
        //One frame ends => skip 2 lines
        if(count%atomNum==0){
            getline(inFile,line);
            cout<<"delete this: "<<line<<endl;
            getline(inFile,line);
            cout<<"and this: "<<line<<endl;
        }
    }
    inFile.close();
    outFile.close();
    return atomNum;
}
//Creates distance matrices for every frame
void readIn(vector<double**> &matLi, int atomNum){
    vector<Vec> atomLi;
    double x,y,z;
    string temp;
    ifstream inFile;
    inFile.open("/home/user/CAall_WoMess.xyz");

    int count=0;

     while (inFile>>temp>>x>>y>>z){
         count++;
         atomLi.push_back(Vec(x,y,z));
         //One frame ends
         if(count%atomNum==0){
             matLi.push_back(distanceMatrix(atomLi,atomNum));
             atomLi.clear();
         }
     }
     inFile.close();
}

void leadClust(vector<double**> &matLi, double threshold, int atomNum){
    ofstream res;
    res.open("/home/user/ClusterRes.txt");
    double distance;
    bool clust = false;
    vector<int> clustLi;
    for(int i = 0; i < matLi.size();i++){
        for(int j = 0; j<i;j++){
            distance = dRMS(matLi[i],matLi[j],matLi.size(),atomNum);
            cout<<distance<<endl;
            //if distance < threshold => assigns frame i to the cluster of frame j
            if(distance < threshold){
                clust=true;
                clustLi.push_back(clustLi[j]);
                break;
            }
        }
        //i is its own cluster centre => i gets own cluster with number i
        if(!clust){
            clustLi.push_back(i);
        }
        clust=false;
    }
    res<<"Threshold: "<<threshold<<endl;
    for(int i = 0;i< clustLi.size();i++){
        cout<<"Frame: "<<i+1<<" Cluster center: "<<clustLi[i]+1<<endl;
        res<<"Frame: "<<i+1<<" Cluster center: "<<clustLi[i]+1<<endl;
    }
    res.close();

}

int main(){
    //Matrix list
    vector<double**> matLi;
    int atomNum;
    //can comment out below if done
    atomNum=convert();
    //can comment in below when above done already
    //atomNum=129;
    readIn(matLi,atomNum);
    //1002 frames
    //cout<<matLi.size();
    leadClust(matLi,0.6,atomNum);
}
